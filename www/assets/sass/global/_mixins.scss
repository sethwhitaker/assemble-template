/* Mixins */
@mixin ir{
  background-color: transparent;
  border: 0;
  overflow: hidden;
  *text-indent: -9999px;

  &:before{
    content: "";
    display: block;
    width: 0;
    height: 100%;
  }
}

// Hide from both screenreaders and browsers: h5bp.com/u
@mixin hidden {
    display: none !important;
    visibility: hidden;
}

// Hide only visually, but have it available for screenreaders: h5bp.com/v
@mixin visuallyhidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}


@mixin invisible {
  visibility: hidden;
}


@mixin clearfix {
  *zoom: 1;
  &:before, &:after {
    display: table;
    content: "";
  }
  &:after{
    clear: both;
  }
}


/*
A slightly more automated approach to BEM modifier classes:
using '&' parent selector interpolation, modifiers extend their bases,
so that HTML markup requires only the modifier class not the base *and* modifier
*/

// the BEM modifier() mixin
@mixin modifier($name) {
  @at-root {
    // '&' is a double-wrapped list
    $selector: nth(&, 1);
    // direct parent will be the last item in that list
    $direct-parent: nth($selector, length($selector));
    // modifier should have all properties of parent
    #{$direct-parent}--#{$name} { @extend #{$direct-parent}; }
    // '@content' will be in a nested selector however, if that is the context
    #{&}--#{$name} { @content; }
  }
}

// a BEM element() mixin--as has been seen elsewhere
@mixin element($name) {
  @at-root {
    #{&}__#{$name} {
      @content;
    }
  }
}

/*
// Example :

.button {
  padding: 0.5em;
  border-radius: 0.25em;
  @include modifier('good') {
    background-color: green;
  }
  @include modifier('bad') {
    background-color: red;
  }
  @include element('icon') {
    margin-left: 1em;
    @include modifier('good') {
      color: green;
    }
    @include modifier('bad') {
      color: red;
    }
  }
}
*/